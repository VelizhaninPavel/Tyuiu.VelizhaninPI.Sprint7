<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="textBoxGuide.Text" xml:space="preserve">
    <value>Информационная система "Каталог заказов". Руководство пользователя.

1. Страница "Каталог заказов"

1.1. Для начала работы загрузите файл, нажав в меню кнопку "Файл", затем "открыть".
 Выберите файл в формате csv и нажмите "Открыть".
1.2. Нажмите в меню кнопку "Статистика" для работы со страницей "Статистика заказа" (см. пункт 2).
1.3. Нажмите кнопку "Руководство пользователя" для получения руководства. Нажмите "Назад" для возврата на главную страницу.
1.4. Нажмите кнопку "О программе" для получения справки о программе. Нажмите "Назад" для возврата на главную страницу.
1.5. Для взаимодействия с таблицей используются следующие кнопки
1.5.1. Выделите строку в таблице (для этого выделите любую ячейку в этой строке) и нажмите кнопку "Добавить", чтобы добавить после выделенной строки новую. 
Пустую строку можно заполнить значениями.
1.5.2. Выделите строку в таблице и нажмите "Удалить", чтобы удалить данную строку из таблицы.
1.5.3. Выделите строку в таблице и нажмите на кнопку "вверх", затем "Переместить", чтобы переместить выделенную строку вверх.
Выделите строку в таблице и нажмите на кнопку "вниз", затем "Переместить", чтобы переместить выделенную строку вниз.
1.5.4. Для поиска по совпадениям введите искомое значение в поле для ввода текста, затем нажмите кнопку "Поиск". Строки с найденными совпадениями появяться в таблице. Нажмите "Отменить поиск", чтобы восстановить все значения.
Внимание: после каждого "поиска" рекомендуется нажимать "Отменить поиск".

2. Страница "Статистика заказа".

2.1. При открытии страницы значения с главной страницы загружаются автоматически. Для поиска заказа и заказчика используются следующие кнопки:
2.1.1. Для поиска по ID заказа введите ID заказа в поле справа от кнопки, затем зажмите "Поиск по ID заказа", затем "найти". ID заказа должен состоять из 5 цифр.
2.1.2. Для поиска по номеру телефона введите номер заказа в поле справа от кнопки, затем зажмите "Поиск по телефону клиента", затем "найти". Номер телефона должен состоять из 11 цифр и начинаться с цифры "8".
2.1.3. Для поиска по совпадениям введите запрос в поле справа от кнопки, затем зажмите "Поиск по совпадениям", затем "найти".

ВНИМАНИЕ: после каждого поиска настоятельно рекомендуется отменять поиск, то есть возвращать исходные знаечения. Для этого нажмите "Отменить поиск", затем "отменить".

2.2. Для возвращения на главную страницу нажмите "Выход".</value>
  </data>
</root>